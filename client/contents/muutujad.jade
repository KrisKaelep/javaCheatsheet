template(name="muutujad")
	h1#muutujad Muutujad
	img#muutujaKast.w200(src="images/muutujad/kast.svg" align="right")
	p Muutuja on sisuliselt nagu kast, kuhu saad ühe asja sisse panna. Sa pead ütlema kuidas kasti nimetada ja mis tüüpi asju sa sinna sisse tahad panna.
	p Näiteks kui soovime lapse vanust salvestada, siis sobib selleks int (integer, ehk täisarv) tüüp ja "mikuVanus" nimetus, siis Javas kirjutame seda järgnevalt:
	pre
		code int vanus = 5;
	p Kui sooviksin selle lapse nime salvestada, kasutaksin tüüpi String, ehk sõne:
	pre
		code String nimi = "Mikk";

	h3#primitiivid Primitiivid ja Objektid

	p Kui võtame suvalise hunniku Java andmetüüpe [int, double, String, ArrayList], siis näeme, et osad on suure algustähtedega, osad on väiksega. See ei ole programmeerija suva järgi vaid tuleneb selle tüübi võimalustest. Näiteks int tüüpi muutuja on lihtsalt täisarv ja temaga ei saagi peale arvutamise midagi teha. String on aga sõne ja temaga saab igast pulli teha:
	pre
		code
			| String nimi = "Krister";          // Teen uue muutuja
			| nimi = nimi.replace('r', 'l');    // muudan kõik 'r' tähed 'l' tähtedeks
			| System.out.println(nimi);         // Nimi on nüüd "Klistel" - hahaha!
	p .replace() on meetod. Ja meetodid saavad ainult objektidel olla. Seega suure algustähega tüübid on objektid ja väikesega on primitiivid. Primitiivil ei ole meetode ja objektidel on.

	h2#andmetyybid Andmetüübid
	p Andmetüüpe on kahte sorti. Sa kas tahad väärtust salvestada või tahad ühte muutujasse mitut väärtust korraga salvestada. Seega nad jagunevadki "väärtus" ja "kogum väärtusi" sotrideks.

	h3#andmetyybid-vaartus Väärtus

	h4#vaartus-ohukoht1 Ohukoht1
	p Igal arvu andmetüübil on oma miinimum ja maksimum võimalik arv, mida andmetüüp suudab hoida. Näiteks kui sul on <code>byte a = 127</code>, siis <code>a + 1</code> toob tulemuseks <code>-128</code>, sest arv jätkub teisest otsast.

	h4#vaartus-ohukoht2 Ohukoht2
	p Võtame lihtsa tehte: 2.0 - 1.1 = 0.9. Ainult, et tegelikult tuleb Javas vastuseks 0.899999999999999. Kohati uskumatu, et selline viga on sees. Seda esineb ka teistes riistvaralähedastest keeltes. Lahenduseks on kas kasutada int tüüpi muutujaid (näiteks 23.34€ on 2334) või BigDecimal klassi arvutusteks. 

	h3#muutuja-arvud Arvud

	.panel.panel-info
		h4#byte.panel-heading byte
		.panel-body
			p väikesed arvud (alates -128 kuni 127)
			br
			strong Kasutamine
			.row
				.col-sm-3
					p Loo uus
				.col-sm-9
					pre
						code byte a = 25;
			.row
				.col-sm-3
					p Liitmine
				.col-sm-9
					pre
						code
							| byte c = (byte) (34 + 3);
							| // (byte) on vajalik typecast, sest 34 ja 3 on algselt int tüüpi väärtused.
			.row
				.col-sm-3
					p Võrdlemine
				.col-sm-9
					pre
						code a == b;
			.row
				.col-sm-3
					p Muuda tüüpi
				.col-sm-9
					pre
						code double c = a;

	.panel.panel-info
		h4#int.panel-heading int
		.panel-body
			p täisarvud (alates -2'147'483'648 kuni 2'147'483'647)
			p Tõenäoliselt kasutame int tüüpi muutujaid arvudega tegeledes.
			br
			strong Kasutamine
			.row
				.col-sm-3
					p Loo uus
				.col-sm-9
					pre
						code int a = 5;
			.row
				.col-sm-3
					p Matemaatika
				.col-sm-9
					pre
						code
							| a + b;
							| a - b;
							| a * b;
							| a / b;
							| (int) Math.pow(a, b); // a astmes b
					.text-danger Jagamine, Math.pow() ja muud arvutused võivad olla ebatäpsed, kuna int ei toeta komakohti.
			.row
				.col-sm-3
					p Võrdlemine
				.col-sm-9
					pre
						code
							| a == b;
							| a != b;
							| a &lt; b; 
							| a &lt;= b; 
							| a &gt; b; 
							| a &gt;= b; 
			.row
				.col-sm-3
					p Muuda tüüpi
				.col-sm-9
					pre
						code double c = a;

	.panel.panel-info
		h4#double.panel-heading double
		.panel-body
			p reaalarvud (komakohaga) (alates 4.9*10^-324 kuni 1.79*10^308)
			.text-danger Reaalarvudega arvutamine on ebatäpne, vt. <a href="/vaartus-ohukoht2">Ohukoht2</a>
			br
			strong Kasutamine
			.row
				.col-sm-3
					p Loo uus
				.col-sm-9
					pre
						code int a = 8.76;
			.row
				.col-sm-3
					p Matemaatika
				.col-sm-9
					pre
						code
							| a + b;
							| a - b;
							| a * b;
							| a / b;
							| Math.pow(a, b); // a astmes b
			.row
				.col-sm-3
					p Võrdlemine
				.col-sm-9
					pre
						code
							| a == b;
							| a != b;
							| a &lt; b; 
							| a &lt;= b; 
							| a &gt; b; 
							| a &gt;= b; 
			.row
				.col-sm-3
					p Muuda tüüpi
				.col-sm-9
					pre
						code int c = (int) a;
					.text-danger typecast <code>(int)</code> ei ümarda arve vaid raiub julmalt koma maha. <code>double 8.76</code> on <code>int 8</code>. Ümardamiseks kasuta <code>Math.round()</code>.

	.panel.panel-info
		h4#BigDecimal.panel-heading BigDecimal
		.panel-body
			p kõik arvud (arvu suurust limiteerib vaid arvuti mälu)
			p BigDecimal on vajalik, et reaalarvudega täpseid arvutusi teha.
			.text-danger NB! Et arvutused oleksid täpsed, peavad arvud olema jutumärkides, ehk sõne kujul.
			br
			strong Kasutamine
			.row
				.col-sm-3
					p Loo uus
				.col-sm-9
					pre
						code 
							| BigDecimal a = new BigDecimal("2.00");
							| BigDecimal b = new BigDecimal("1.1");
			.row
				.col-sm-3
					p Matemaatika
				.col-sm-9
					pre
						code
							| a.subtract(b);    // a - b
							| a.add(b);         // a + b
							| a.divide(b)       // a / b (ohtlik!)
							| a.divide(b, 3, BigDecimal.ROUND_HALF_UP); // õige
							| a.multiply(b);    // a * b
							| a.pow(3);         // a astmel 3
					.text-info a.divide() annab errori, kui ei saa täpselt arvutada. Tuleb kasutada formaati
						| <code>a.divide(b, 3, BigDecimal.ROUND_HALF_UP)</code>, ehk
						| <code>a.divide(jagaja, komakohti, ümardamise valem)</code>.
			.row
				.col-sm-3
					p Võrdlemine
				.col-sm-9
					pre
						code
							| a.equals(b)       // a == b
							| a.compareTo(b)    // annab vastuseks -1, 0 või 1
							|                   // -1 (a &lt; b)
							|                   // 0 (a == b)
							|                   // 1 (a &gt; b)
			.row
				.col-sm-3
					p Muuda tüüpi
				.col-sm-9
					pre
						code
							| int c = a.intValue();
							| double d = a.doubleValue();

	h3#muutuja-soned Sõned

	.panel.panel-info
		h4#char.panel-heading char
		.panel-body
			p üksik täht
			.text-danger Kindlasti kasuta ühekordseid jutumärke!
			br
			strong Kasutamine
			.row
				.col-sm-3
					p Loo uus
				.col-sm-9
					pre
						code char a = 'a';
			.row
				.col-sm-3
					p Võrdlemine
				.col-sm-9
					pre
						code 
							| 'a' == 'b';
							| 'a' != 'b';
							| 'a' &lt; 'b';
							| 'a' &gt; 'b';
							| 'a' &lt;= 'b';
							| 'a' &gt;= 'b';

	.panel.panel-info
		h4#String.panel-heading String
		.panel-body
			p Sõne, ehk jutumärkide vahele saab panna kõiki sümboleid
			.text-danger Kindlasti kasuta topelt jutumärke!
			br
			strong Kasutamine
			.row
				.col-sm-3
					p Loo uus
				.col-sm-9
					pre
						code String a = "Lähme õue mängima.";
			.row
				.col-sm-3
					p Võrdlemine
				.col-sm-9
					pre
						code a.equals(b)
			.row
				.col-sm-3
					p Liitmine
				.col-sm-9
					pre
						code 
							| "Tere, " + "hommikust" =&gt; "Tere, hommikust"
							| "Vanus: " + 45         =&gt; "Vanus: 45"
							| "Vanus: " + "45"       =&gt; "Vanus: 45"
							| "45" + 5               =&gt; "455"

			.row
				.col-sm-3
					p Tüübi muutmine
				.col-sm-9
					pre
						code 
							| int c = Integer.parseInt(a);
							| double c = Double.parseDouble(a);
			.row
				.col-sm-3
					p Kas sõne sisaldab "õue"
				.col-sm-9
					pre
						code a.contains("õue");
			.row
				.col-sm-3
					p Muuda kõik tähed suureks
				.col-sm-9
					pre
						code a.toUpperCase();
			.row
				.col-sm-3
					p Muuda kõik tähed väikseks
				.col-sm-9
					pre
						code a.toLowerCase();
			.row
				.col-sm-3
					p Poolita sõne tühikutega.
				.col-sm-9
					pre
						code
							| a.split(" ");
							| // ["Lähme", "õue", "mängima."]
			.row
				.col-sm-3
					p Asenda "õue" sõnega "arvutisse"
				.col-sm-9
					pre
						code
							| a.replace("õue", "arvutisse");
							| // "Lähme arvutisse mängima."
			.row
				.col-sm-3
					p Nagu replace(), aga <a href="http://regexone.com/" target="_blank">regex'iga</a>
				.col-sm-9
					pre
						code a.replaceAll(regex, "uus väärtus");
			.row
				.col-sm-3
					p Kas sõne on tühi?
				.col-sm-9
					pre
						code a.isEmpty();
			.row
				.col-sm-3
					p Mis indeksil on sõne "mängima"?
				.col-sm-9
					pre
						code a.indexOf("mängima"); // 10
			.row
				.col-sm-3
					p Mitu tähte on sõne pikk?
				.col-sm-9
					pre
						code a.length(); // 18
			.row
				.col-sm-3
					p Mis täht asub indeksil 0?
				.col-sm-9
					pre
						code a.charAt(0); // 'L'
			.row
				.col-sm-3
					p Kas sõne s ja b on identse sisuga?
				.col-sm-9
					pre
						code a.equals(b);

	h3#muutuja-muu Muu

	.panel.panel-info
		h4#boolean.panel-heading boolean
		.panel-body
			p tõene või väär, ehk <code>true</code> või <code>false</code>.
			br
			strong Kasutamine
			.row
				.col-sm-3
					p Loo uus
				.col-sm-9
					pre
						code boolean a = true;
			.row
				.col-sm-3
					p Võrdlemine
				.col-sm-9
					pre
						code 
							| true == true;
							| true != false;
							| true == true &amp;&amp; false == false;
							| true == false || false == false;
					.text-info <code>&amp;&amp;</code> on nagu "ja", ehk mõlemad tingimused peavad olema tõesed.
					.text-info <code>||</code> on nagu "või", ehk üks tingimustest peab olema tõene.
					.text-danger <code>||</code> ei ole LL, ega ii. <code>||</code> on "pipe" ehk <kbd>AltGr + &lt;</kbd>;

	.panel.panel-info
		h4#Object.panel-heading Object
		.panel-body
			p keerulisemad objektid. ArrayList ja String on samuti objektid, aga siin pean silmas kõiki objekte. Need võivad tulla Java APIst või oled sa ise neid loonud.

			p Näiteks, kui tegin ise klassi Hobune:
			pre
				code
					| public class Hobune {
					|     int kaal = 500;
					|     String nimi = "Hopsu";
					| 
					|     public void ytleOmaNimi() {
					|         System.out.println("H-H-H-Hopssuuuu..");
					|     }
					| }
			p siis nüüd saan oma main meetodi sees luua "Hobune" klassist uue objekti ja kasutada tema <code>public</code> meetode.
			pre
				code
					| public class MinuProgramm {
					|     public static void main(String[] args) {
					| 
					|         Hobune h = new Hobune();    // uus hobuse objekt
					|         h.ytleOmaNimi();            // kasutan tema meetodi
					|         System.out.println(h.kaal); // küsin välja hobuse kaalu
					| 
					|     }
					| }
			p ja programm printis välja kaks sõnumit: "H-H-H-Hopssuuuu.." ja "500".
			
	h3#andmetyybid-kogum-vaartusi Kogum väärtusi